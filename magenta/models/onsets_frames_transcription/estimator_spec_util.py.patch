Index: build/venv/lib/python3.8/site-packages/magenta/models/onsets_frames_transcription/estimator_spec_util.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/build/venv/lib/python3.8/site-packages/magenta/models/onsets_frames_transcription/estimator_spec_util.py b/build/venv/lib/python3.8/site-packages/magenta/models/onsets_frames_transcription/estimator_spec_util.py
--- a/build/venv/lib/python3.8/site-packages/magenta/models/onsets_frames_transcription/estimator_spec_util.py	
+++ b/build/venv/lib/python3.8/site-packages/magenta/models/onsets_frames_transcription/estimator_spec_util.py	
@@ -137,7 +137,7 @@
 
 def get_estimator_spec(hparams, mode, features, labels, frame_logits,
                        onset_logits, offset_logits, velocity_values,
-                       offset_network=True):
+                       offset_network=True, include_metrics=True, debug=False):
   """Create TPUEstimatorSpec."""
   loss_metrics = {}
   loss = None
@@ -205,13 +205,14 @@
           min_pitch=constants.MIN_MIDI_PITCH)
       velocity_values = tf.map_fn(map_values, velocity_values)
 
-    metrics_values = get_metrics(features, labels, frame_probs, onset_probs,
-                                 frame_predictions, onset_predictions,
-                                 offset_predictions, velocity_values, hparams)
+    if include_metrics:
+        metrics_values = get_metrics(features, labels, frame_probs, onset_probs,
+                                     frame_predictions, onset_predictions,
+                                     offset_predictions, velocity_values, hparams)
 
-    for label, loss_collection in loss_metrics.items():
-      loss_label = 'losses/' + label
-      metrics_values[loss_label] = loss_collection
+        for label, loss_collection in loss_metrics.items():
+          loss_label = 'losses/' + label
+          metrics_values[loss_label] = loss_collection
 
   if mode == tf.estimator.ModeKeys.TRAIN:
     train_op = tf_slim.optimize_loss(
@@ -237,19 +238,24 @@
         mode=mode, loss=loss, eval_metric_ops=metric_ops)
   elif mode == tf.estimator.ModeKeys.PREDICT:
     predictions = {
-        'frame_probs':
-            frame_probs,
         'onset_probs':
             onset_probs,
-        'frame_predictions':
-            frame_predictions,
         'onset_predictions':
             onset_predictions,
-        'offset_predictions':
-            offset_predictions,
         'velocity_values':
             velocity_values,
-        'sequence_predictions':
+        'spec':
+            features.spec  # for debug input mel with tflite
+    }
+    if debug:
+        predictions['spec'] = features.spec
+    if not hparams.drums_only:
+        predictions['frame_probs'] = frame_probs
+        predictions['frame_predictions'] = frame_predictions
+        predictions['offset_predictions'] = offset_predictions
+
+    if include_metrics:
+        predictions['sequence_predictions'] = \
             _predict_sequences(
                 frame_probs=frame_probs,
                 onset_probs=onset_probs,
@@ -257,20 +263,16 @@
                 onset_predictions=onset_predictions,
                 offset_predictions=offset_predictions,
                 velocity_values=velocity_values,
-                hparams=hparams),
+                hparams=hparams)
         # Include some features and labels in output because Estimator 'predict'
         # API does not give access to them.
-        'sequence_ids':
-            features.sequence_id,
-        'sequence_labels':
-            labels.note_sequence,
-        'frame_labels':
-            labels.labels,
-        'onset_labels':
-            labels.onsets,
-    }
-    for k, v in metrics_values.items():
-      predictions[k] = tf.stack(v)
+        predictions['sequence_ids'] = features.sequence_id
+        predictions['sequence_labels'] = labels.note_sequence
+        predictions['frame_labels'] = labels.labels
+        predictions['onset_labels'] = labels.onsets
+
+        for k, v in metrics_values.items():
+          predictions[k] = tf.stack(v)
 
     return tf.estimator.EstimatorSpec(mode=mode, predictions=predictions)
   else:
